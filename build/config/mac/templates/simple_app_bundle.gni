import("//build/config/mac/templates/merge_plist.gni")

# Template to generate an app bundle.
#
# All the other parameters are forwarded to a shared_library target that will
# generate the bundle binary. In general, you want to pass at least "sources"
# or "deps" to have some binary objects included in your shared library.
#
# Arguments
#
#   - info_plist (optional)
#
#       path to additional Info.plist to merge into the final bundle Info.plist
#
#   - bundle_identifier_prefix (optional)
#
#       prefix for the bundle identifier (the full identifier will be defined
#       to $bundle_identifier_prefix.$output_name); if unset will defaults to
#       default_bundle_identifier_prefix
#
#   - output_name (optional)
#
#       name of the bundle without the extension; defaults to $target_name
#
template("simple_app_bundle") {
  _output_name = target_name
  if (defined(invoker.output_name)) {
    _output_name = invoker.output_name
  }

  _bundle_identifier_prefix = "com.example"
  if (defined(invoker.bundle_identifier_prefix)) {
    _bundle_identifier_prefix = invoker.bundle_identifier_prefix
  }

  _bundle_identifier = "$_bundle_identifier_prefix.$_output_name"

  _executable_target = target_name + "_executable"
  _executable_bundle = target_name + "_executable_bundle"

  executable(_executable_target) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "bundle_extension",
                             "bundle_identifier_prefix",
                             "bundle_type",
                             "display_name",
                             "info_plist",
                             "output_name",
                             "public_headers",
                           ])

    output_extension = ""
    output_name = _output_name
    output_prefix_override = true
    output_dir = "$target_out_dir/$_executable_target"
  }

  bundle_data(_executable_bundle) {
    public_deps = [ ":$_executable_target" ]
    sources = [ "$target_out_dir/$_executable_target/$_output_name" ]
    outputs = [ "{{bundle_executable_dir}}/{{source_file_part}}" ]
  }

  product_type = "com.apple.product-type.application"

  bundle_identifier = _bundle_identifier
  bundle_extension = "app"
  bundle_type = "AAPL"

  # _output_name = target_name
  _display_name = _output_name

  _plist_target = target_name + "_plist"
  _plist_bundle = target_name + "_plist_bundle"

  merge_plist(_plist_target) {
    substitutions = {
      DEVELOPMENT_LANGUAGE = "en"
      EXECUTABLE_NAME = "$_output_name"
      PRODUCT_BUNDLE_IDENTIFIER = bundle_identifier
      PRODUCT_BUNDLE_PACKAGE_TYPE = bundle_type
      PRODUCT_NAME = "$_display_name"
    }

    # format = "binary1"
    format = "xml1"
    output = "$target_out_dir/$_plist_target/Info.plist"
    plists = [
      # get_label_info("//build/config/mac:compiler_plist", "target_out_dir") +
      #     "/compiler_plist/Info.plist",
      "//build/config/mac/resources/Info.plist",
    ]

    if (defined(invoker.info_plist)) {
      plists += [ invoker.info_plist ]
    }

    # deps = [ "//build/config/mac:compiler_plist" ]
  }

  bundle_data(_plist_bundle) {
    public_deps = [ ":$_plist_target" ]
    sources = [ "$target_out_dir/$_plist_target/Info.plist" ]
    outputs = [ "{{bundle_contents_dir}}/Info.plist" ]
  }

  create_bundle(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "display_name",
                             "output_name",
                             "bundle_extension",
                             "bundle_type",
                           ])

    if (!defined(public_deps)) {
      public_deps = []
    }
    public_deps += [ ":$_plist_bundle" ]
    bundle_root_dir = "$root_out_dir/$_output_name.${bundle_extension}"

    bundle_contents_dir = "${bundle_root_dir}/Contents"
    bundle_resources_dir = "${bundle_contents_dir}/Resources"
    bundle_executable_dir = "${bundle_contents_dir}/MacOS"
  }
}
